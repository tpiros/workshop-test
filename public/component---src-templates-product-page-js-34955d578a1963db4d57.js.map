{"version":3,"sources":["webpack:///./src/components/colour-select.js","webpack:///./src/templates/product-page.js"],"names":["ColourSelect","changeColour","getColourName","name","hex","map","colour","key","value","onClick","e","preventDefault","applyColour","getColour","className","style","backgroundColor","ProductPage","data","useState","colourTransformation","setColour","colourName","imgsrc","setImgsrc","imageRef","useRef","length","useEffect","current","src","MutationObserver","muts","forEach","m","type","attributeName","target","observe","attributes","innerRef","cloudName","publicId","markdownRemark","frontmatter","image","width","crop","fetchFormat","quality","secure","rawTransformation","to","price","data-item-id","id","data-item-custom1-name","data-item-custom1-options","data-item-price","data-item-url","fields","slug","data-item-name","data-item-image","dangerouslySetInnerHTML","__html","html","pageQuery"],"mappings":"uOAiEeA,MA/Df,YAAwD,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,cAkCpC,OACE,oCACE,kEACA,4BApCY,CACd,CACEC,KAAM,SACNC,IAAK,UAEP,CACED,KAAM,OACNC,IAAK,UAEP,CACED,KAAM,SACNC,IAAK,UAEP,CACED,KAAM,OACNC,IAAK,UAEP,CACED,KAAM,MACNC,IAAK,UAEP,CACED,KAAM,WACNC,IAAK,WAcMC,KAAI,SAAAC,GACX,OACE,wBACEC,IAAKD,EAAOF,IACZI,MAAOF,EAAOF,IACdK,QAAS,SAAAC,IAhBrB,SAAqBA,EAAGJ,GACtBI,EAAEC,iBACFV,EAAa,mBAAmBK,EAApB,cAeAM,CAAYF,EAAGJ,EAAOF,KAbpC,SAAmBM,EAAGJ,GACbJ,EAAcI,EAAOH,MAahBU,CAAUH,EAAGJ,KAGf,0BACEQ,UAAU,wEACVC,MAAO,CAAEC,gBAAiB,IAAMV,EAAOF,MAFzC,KAKQ,IACPE,EAAOH,YCnDP,SAASc,EAAT,GAAgC,IAATC,EAAQ,EAARA,KAAQ,EACFC,mBAAS,IAA5CC,EADqC,KACfC,EADe,OAEdF,mBAAS,IAAlCG,EAFuC,KAE3BT,EAF2B,OAGlBM,mBAAS,IAA9BI,EAHuC,KAG/BC,EAH+B,KAItCC,EAAWC,mBAsBjB,OApB0B,IAAtBJ,EAAWK,QACbd,GAAU,kBAAOS,EAAa,cAGhCM,qBAAU,YACRJ,GAAU,kBAAMC,EAASI,QAAQC,OAC7BL,EAASI,UACM,IAAIE,kBAAiB,SAAAC,GACpCA,EAAKC,SAAQ,SAAAC,GACI,eAAXA,EAAEC,MAA6C,QAApBD,EAAEE,eAC/BZ,GAAU,kBAAMU,EAAEG,OAAOP,aAItBQ,QAAQb,EAASI,QAAS,CACjCU,YAAY,MAGf,CAAChB,IAGF,yBAAKT,UAAU,6BACb,kBAAC,QAAD,CACE0B,SAAUf,EACVgB,UAAU,aACVC,SAAUxB,EAAKyB,eAAeC,YAAYC,MAC1CC,MAAM,MACNC,KAAK,QACLC,YAAY,OACZC,QAAQ,OACRC,OAAO,OACPpC,UAAU,oCAEV,kBAAC,iBAAD,CAAgBqC,kBAAmB/B,KAErC,yBAAKN,UAAU,iCACb,kBAAC,IAAD,CAAMA,UAAU,yBAAyBsC,GAAG,aAA5C,sBAGA,wBAAItC,UAAU,qCACXI,EAAKyB,eAAeC,YAAYzC,MAEnC,0BAAMW,UAAU,4CAAhB,IACII,EAAKyB,eAAeC,YAAYS,OAEpC,4BACEvC,UAAU,uCACVwC,eAAcpC,EAAKyB,eAAeC,YAAYW,GAC9CC,yBAAuB,SACvBC,4BAA2BnC,EAC3BoC,kBAAiBxC,EAAKyB,eAAeC,YAAYS,MACjDM,gBACE,yBAA2BzC,EAAKyB,eAAeiB,OAAOC,KAExDC,iBAAgB5C,EAAKyB,eAAeC,YAAYzC,KAChD4D,kBAAiBxC,GAVnB,eAcA,yBACET,UAAU,gBACVkD,wBAAyB,CACvBC,OAAQ/C,EAAKyB,eAAeuB,QAGK,4BAApChD,EAAKyB,eAAeiB,OAAOC,KAC1B,kBAAC,EAAD,CAAc5D,aAAcoB,EAAWnB,cAAeW,IAEtD,KAOH,IAAMsD,EAAS","file":"component---src-templates-product-page-js-34955d578a1963db4d57.js","sourcesContent":["import React from \"react\"\n\nfunction ColourSelect({ changeColour, getColourName }) {\n  const colours = [\n    {\n      name: \"yellow\",\n      hex: \"ffff00\",\n    },\n    {\n      name: \"teal\",\n      hex: \"008080\",\n    },\n    {\n      name: \"indigo\",\n      hex: \"4b0082\",\n    },\n    {\n      name: \"blue\",\n      hex: \"0000ff\",\n    },\n    {\n      name: \"red\",\n      hex: \"ff0000\",\n    },\n    {\n      name: \"original\",\n      hex: \"d79025\",\n    },\n  ]\n  function applyColour(e, colour) {\n    e.preventDefault()\n    changeColour(`e_replace_color:${colour}:10:d79025`)\n  }\n  function getColour(e, colour) {\n    return getColourName(colour.name)\n  }\n  return (\n    <>\n      <p>Product available in other colours:</p>\n      <ul>\n        {colours.map(colour => {\n          return (\n            <li\n              key={colour.hex}\n              value={colour.hex}\n              onClick={e => {\n                applyColour(e, colour.hex)\n                getColour(e, colour)\n              }}\n            >\n              <span\n                className=\"cursor-pointer inline-block px-6 py-2 rounded-full m-1 text-black-800\"\n                style={{ backgroundColor: \"#\" + colour.hex }}\n              >\n                &nbsp;\n              </span>{\" \"}\n              {colour.name}\n            </li>\n          )\n        })}\n      </ul>\n    </>\n  )\n}\n\nexport default ColourSelect\n","import React, { useState, useEffect, useRef } from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport { Image, Transformation } from \"cloudinary-react\"\nimport ColourSelect from \"../components/colour-select\"\n\nexport default function ProductPage({ data }) {\n  const [colourTransformation, setColour] = useState(\"\")\n  let [colourName, getColour] = useState(\"\")\n  let [imgsrc, setImgsrc] = useState(\"\")\n  const imageRef = useRef()\n\n  if (colourName.length === 0) {\n    getColour(() => (colourName = \"original\"))\n  }\n\n  useEffect(() => {\n    setImgsrc(() => imageRef.current.src)\n    if (imageRef.current) {\n      const observer = new MutationObserver(muts => {\n        muts.forEach(m => {\n          if (m.type === \"attributes\" && m.attributeName === \"src\") {\n            setImgsrc(() => m.target.src)\n          }\n        })\n      })\n      observer.observe(imageRef.current, {\n        attributes: true,\n      })\n    }\n  }, [imgsrc])\n\n  return (\n    <div className=\"flex flex-col md:flex-row\">\n      <Image\n        innerRef={imageRef}\n        cloudName=\"tamas-demo\"\n        publicId={data.markdownRemark.frontmatter.image}\n        width=\"600\"\n        crop=\"scale\"\n        fetchFormat=\"auto\"\n        quality=\"auto\"\n        secure=\"true\"\n        className=\"h-full w-full md:mx-8 rounded-lg\"\n      >\n        <Transformation rawTransformation={colourTransformation} />\n      </Image>\n      <div className=\"mt-4 md:mt-0 md:w-2/3 md:mx-8\">\n        <Link className=\"font-bold text-red-600\" to=\"/products\">\n          ← Back to products\n        </Link>\n        <h1 className=\"font-bold text-4xl text-black-900\">\n          {data.markdownRemark.frontmatter.name}\n        </h1>\n        <span className=\"block font-semibold text-lg text-red-600\">\n          £{data.markdownRemark.frontmatter.price}\n        </span>\n        <button\n          className=\"btn btn-green mt-4 snipcart-add-item\"\n          data-item-id={data.markdownRemark.frontmatter.id}\n          data-item-custom1-name=\"Colour\"\n          data-item-custom1-options={colourName}\n          data-item-price={data.markdownRemark.frontmatter.price}\n          data-item-url={\n            \"http://localhost:8000/\" + data.markdownRemark.fields.slug\n          }\n          data-item-name={data.markdownRemark.frontmatter.name}\n          data-item-image={imgsrc}\n        >\n          Add to cart\n        </button>\n        <div\n          className=\"markdown mt-4\"\n          dangerouslySetInnerHTML={{\n            __html: data.markdownRemark.html,\n          }}\n        ></div>\n        {data.markdownRemark.fields.slug === \"/products/light-jumper/\" ? (\n          <ColourSelect changeColour={setColour} getColourName={getColour} />\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        id\n        name\n        price\n        image\n      }\n      fields {\n        slug\n      }\n    }\n  }\n`\n"],"sourceRoot":""}